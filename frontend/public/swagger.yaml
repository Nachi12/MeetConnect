openapi: 3.0.3
info:
  title: Interview Management API
  description: REST API for managing interviews, authentication, and resources.
  version: 1.0.0
servers:
  - url: http://localhost:5001/api
    description: Local development server

tags:
  - name: Auth
    description: Authentication & User routes
  - name: Interviews
    description: Manage interview scheduling and tracking
  - name: Users
    description: Public user information
  - name: Resources
    description: Preparation resources

paths:
  /auth/register:
    post:
      tags: [Auth]
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name, email, password]
              properties:
                name:
                  type: string
                email:
                  type: string
                password:
                  type: string
                contact:
                  type: string
                dob:
                  type: string
                  format: date
      responses:
        '200':
          description: Successfully registered
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  token:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'

  /auth/login:
    post:
      tags: [Auth]
      summary: Login user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }
                  token: { type: string }
                  user: { $ref: '#/components/schemas/User' }

  /auth/me:
    get:
      tags: [Auth]
      summary: Get current user details
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Current user details
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
    put:
      tags: [Auth]
      summary: Update user profile
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name: { type: string }
                contact: { type: string }
                dob: { type: string, format: date }
      responses:
        '200':
          description: Profile updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }
                  user: { $ref: '#/components/schemas/User' }

  /auth/logout:
    post:
      tags: [Auth]
      summary: Logout user
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }

  /auth/forgot-password:
    post:
      tags: [Auth]
      summary: Request password reset
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email]
              properties:
                email:
                  type: string
      responses:
        '200':
          description: Reset token generated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }
                  resetToken: { type: string }

  /auth/reset-password:
    post:
      tags: [Auth]
      summary: Reset user password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [token, password]
              properties:
                token: { type: string }
                password: { type: string }
      responses:
        '200':
          description: Password reset successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }

  /interviews:
    post:
      tags: [Interviews]
      summary: Create a new interview
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Interview'
      responses:
        '200':
          description: Interview created
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  message: { type: string }
                  interview: { $ref: '#/components/schemas/Interview' }

    get:
      tags: [Interviews]
      summary: Get all interviews (with optional status filter)
      security:
        - bearerAuth: []
      parameters:
        - name: status
          in: query
          schema:
            type: string
            enum: [upcoming, completed]
      responses:
        '200':
          description: List of interviews
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  interviews:
                    type: array
                    items:
                      $ref: '#/components/schemas/Interview'

  /interviews/{id}:
    get:
      tags: [Interviews]
      summary: Get a single interview by ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Interview details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Interview'

    put:
      tags: [Interviews]
      summary: Update interview by ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Interview'
      responses:
        '200':
          description: Interview updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  message: { type: string }
                  interview: { $ref: '#/components/schemas/Interview' }

    delete:
      tags: [Interviews]
      summary: Delete interview by ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Interview deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  message: { type: string }

  /interviews/{id}/complete:
    patch:
      tags: [Interviews]
      summary: Mark interview as completed
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  enum: [completed]
      responses:
        '200':
          description: Interview marked completed
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  message: { type: string }
                  interview: { $ref: '#/components/schemas/Interview' }

  /users/{id}:
    get:
      tags: [Users]
      summary: Get public user info by ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Public user info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /resources:
    get:
      tags: [Resources]
      summary: Get all resources
      responses:
        '200':
          description: List of resources
          content:
            application/json:
              schema:
                type: object
                properties:
                  resources:
                    type: array
                    items:
                      $ref: '#/components/schemas/Resource'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id: { type: string }
        name: { type: string }
        email: { type: string }
        contact: { type: string }
        dob: { type: string, format: date }
        createdAt: { type: string, format: date-time }

    Interview:
      type: object
      properties:
        id: { type: string }
        type: { type: string }
        date: { type: string, format: date }
        time: { type: string }
        interviewer: { type: string }
        duration: { type: string }
        notes: { type: string }
        status: { type: string, enum: [upcoming, completed] }

    Resource:
      type: object
      properties:
        id: { type: string }
        title: { type: string }
        description: { type: string }
        link: { type: string }

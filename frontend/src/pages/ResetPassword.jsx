/**
 * ResetPassword Component
 * 
 * Password reset page that allows users to set a new password using a reset token.
 * The token is typically sent via email and included in the URL as a query parameter.
 * 
 * Features:
 * - Token-based password reset authentication
 * - Password confirmation validation
 * - Minimum password length enforcement (6 characters)
 * - Real-time validation with toast notifications
 * - Secure API communication
 * - Automatic redirect to login after successful reset
 * - Error handling for expired/invalid tokens
 * 
 * URL Format: /reset-password?token=<reset_token>
 * 
 * @component
 * @returns {JSX.Element} Password reset form or error message if token is invalid
 */

import { useState } from 'react';
import { useNavigate, useSearchParams } from 'react-router-dom';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { toast } from 'sonner';
import { FaLock } from 'react-icons/fa';

const ResetPassword = () => {
  /**
   * State Management
   */
  
  // New password entered by user
  const [password, setPassword] = useState('');
  
  // Password confirmation for validation
  const [confirmPassword, setConfirmPassword] = useState('');
  
  // Loading state to disable form during submission
  const [loading, setLoading] = useState(false);
  
  // Hook for programmatic navigation
  const navigate = useNavigate();
  
  // Hook for reading URL query parameters
  const [searchParams] = useSearchParams();
  
  /**
   * Extract reset token from URL query parameter
   * Token is generated by backend and sent to user's email
   * Format: /reset-password?token=abc123xyz
   * 
   * @constant {string|null}
   */
  const token = searchParams.get('token');

  /**
   * Handles password reset form submission
   * 
   * Validation Process:
   * 1. Checks if passwords match
   * 2. Validates minimum password length (6 characters)
   * 3. Sends reset request to backend API with token
   * 4. Redirects to login page on success
   * 5. Shows appropriate error messages on failure
   * 
   * @param {Event} e - Form submit event
   * @async
   */
  const handleSubmit = async (e) => {
    e.preventDefault();
    
    // Validation 1: Check if passwords match
    if (password !== confirmPassword) {
      toast.error('Passwords do not match');
      return;
    }
    
    // Validation 2: Check minimum password length
    if (password.length < 6) {
      toast.error('Password must be at least 6 characters');
      return;
    }
    
    // Set loading state to show spinner and disable form
    setLoading(true);
    
    try {
      // Send password reset request to backend API
      const response = await fetch(`${import.meta.env.VITE_API_URL}/api/auth/reset-password`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ 
          token,    // Reset token from URL
          password  // New password
        }),
      });
      
      // Handle successful password reset
      if (response.ok) {
        // Show success notification
        toast.success('Password reset successful! You can now login.');
        
        // Redirect to login page after 1 second
        navigate('/login');
      } else {
        // Handle API error responses
        const data = await response.json();
        toast.error(data.message || 'Failed to reset password');
      }
    } catch (error) {
      // Handle network errors or server unavailability
      toast.error('Network error. Please try again.');
    } finally {
      // Reset loading state regardless of success or failure
      setLoading(false);
    }
  };

  /**
   * Early return if no token is found in URL
   * Displays error message and prevents form rendering
   * This prevents unauthorized password reset attempts
   */
  if (!token) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-blue-50 via-white to-purple-50 flex items-center justify-center p-4">
        <Card className="w-full max-w-md">
          <CardHeader>
            <CardTitle className="text-2xl text-red-600">Invalid Reset Link</CardTitle>
            <CardDescription>
              The password reset link is invalid or has expired. 
              Please request a new password reset.
            </CardDescription>
          </CardHeader>
          <CardFooter>
            {/* Button to navigate back to login page */}
            <Button 
              onClick={() => navigate('/login')} 
              className="w-full"
            >
              Back to Login
            </Button>
          </CardFooter>
        </Card>
      </div>
    );
  }

  /**
   * Main component render - Password reset form
   */
  return (
    /* Main container with gradient background and full viewport height */
    <div className="min-h-screen bg-gradient-to-br from-blue-50 via-white to-purple-50 flex items-center justify-center p-4">
      {/* Reset password card container */}
      <Card className="w-full max-w-md shadow-2xl">
        {/* Card header with title and description */}
        <CardHeader>
          <CardTitle className="text-2xl font-bold text-center">
            Reset Your Password
          </CardTitle>
          <CardDescription className="text-center">
            Enter your new password below
          </CardDescription>
        </CardHeader>

        {/* Card content with password reset form */}
        <CardContent>
          <form onSubmit={handleSubmit} className="space-y-4">
            
            {/* New Password Input Field */}
            <div className="space-y-2">
              <Label htmlFor="password">New Password *</Label>
              <div className="relative">
                {/* Lock icon positioned inside input */}
                <FaLock className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
                <Input
                  id="password"
                  type="password"
                  placeholder="••••••••"
                  value={password}
                  onChange={(e) => setPassword(e.target.value)}
                  className="pl-10" // Left padding for icon
                  required
                  minLength={6} // HTML5 validation
                />
              </div>
              {/* Helper text for password requirements */}
              <p className="text-xs text-muted-foreground">
                Password must be at least 6 characters long
              </p>
            </div>

            {/* Confirm Password Input Field */}
            <div className="space-y-2">
              <Label htmlFor="confirmPassword">Confirm Password *</Label>
              <div className="relative">
                {/* Lock icon for password confirmation */}
                <FaLock className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
                <Input
                  id="confirmPassword"
                  type="password"
                  placeholder="••••••••"
                  value={confirmPassword}
                  onChange={(e) => setConfirmPassword(e.target.value)}
                  className="pl-10"
                  required
                />
              </div>
            </div>

            {/* Submit Button with Loading State */}
            <Button 
              type="submit" 
              className="w-full"
              disabled={loading} // Disable button during form submission
            >
              {loading ? 'Resetting Password...' : 'Reset Password'}
            </Button>
          </form>
        </CardContent>

        {/* Card footer with back to login link */}
        <CardFooter className="flex justify-center">
          <Button 
            variant="link" 
            onClick={() => navigate('/login')}
          >
            Back to Login
          </Button>
        </CardFooter>
      </Card>
    </div>
  );
};

export default ResetPassword;
